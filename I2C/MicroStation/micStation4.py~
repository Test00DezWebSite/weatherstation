#!/usr/bin/env python
# -*- coding: utf-8 -*-

# Imports from mraa and upm libraries
#------------------------------------
import mraa, upm
import thread, time, math

from upm import pyupm_mcp9808 as mcp9808
from upm import pyupm_bmp280 as bmp280
from upm import pyupm_tsl2561 as tsl2561
from upm import pyupm_si114x as si1145

# Constant declarations
#----------------------
# i2c bus 1 on RaspBerry Pi
bus1 = 0
mcpAddr = 0x18
bmeAddr = 0x77
tslAddr = 0x39
siAddr = 0x60

localAlt = 156.5
UPPER_TEMP = 0x02
LOWER_TEMP = 0x03
CRIT_TEMP = 0x04

# create sensors on the bus 1
mcp = mcp9808.MCP9808(bus1)
bme = bmp280.BME280(bus1)
#tsl = tsl2561.TSL2561(bus1)
tsl = tsl2561.TSL2561(bus1, tslAddr)
#mcp = mcp9808.MCP9808(bus1, mcpAddr)
#bme = bmp280.BME280(bus1, bmeAddr)
uv = si1145.SI114X(bus1, siAddr)

#Functions
#---------
# bme 280
#****************
def get_bmSensor(thisSensor) :
	name = thisSensor.getModuleName ()
	bmpId = thisSensor.getChipID ()
	print 'capteur : %s\t'%name + 'Id : %d\n'%bmpId
	return
	
def reset_bmSensor(thisSensor) :
	thisSensor.reset()
	return

def mes_bmTPA(thisSensor) :
	thisSensor.update ()
	bmTemp = thisSensor.getTemperature (false)
	bmPress = thisSensor.getPressure ()
	bmAlt = thisSensor.getAltitude (1013.25)
	return(bmTemp, bmPress, bmAlt)
	
def mes_bmeHum(thisSensor) :
	thisSensor.update ()
	bmeHum = thisSensor.getHumidity ()
	return(bmeHum)
	
def convertSeaLevel (m_Pressure):
	s_Pressure = m_Pressure / math.pow(1.0 - localAlt/44330, 5.255)
	return s_Pressure	
	
# MCP9808
#********
def get_mcpSensor():
	unity = mcp.isCelsius()
	upper = mcp.getMonitorReg (UPPER_TEMP)
	lower = mcp.getMonitorReg (LOWER_TEMP)
	critic = mcp.getMonitorReg (CRIT_TEMP)
	hyst = mcp.getHysteresis ()
	resol = mcp.getResolution ()
	idManuf = mcp.getManufacturer ()
	mcpId = mcp.getDevicedId ()
	if unity :
		print 'We are measuring in Celsius'
	else :
		print 'We are measuring in Fahrenheit'
	print '\tLower T° : %.3f\n'%lower + '\tUpperT° : %.3f\n'%upper + '\tCritical T° : %.3f\n'%critic
	print 'Hysteresis value : %.3f'%hyst
	print 'Resolution : %.4f'%resol
	print 'Manufacturer Id : %d'%idManuf
	print 'Device Id : %d\n'%mcpId
	return
	
def mes_mcpTemp():
	mcpTemp = mcp.getTemp ()
	return (mcpTemp)

# TSL2561
#********
def mes_tslLux() :
	lux = tsl.getLux ()
	return(lux)

#SI1145
#******
def mes_uv() :
	uvIndex = uv.getUVIndex()
	return(uvIndex)

#Activate or test some sensors
#---------------------
mcp.shutDown(False)
uv.initialize()

	
# Main function
###############	
def input_thread(CheckInput):
	check = raw_input()
	CheckInput.append(check)
	return
	
def init_Thread () :
	CheckInput = []
	thread.start_new_thread(input_thread, (CheckInput,))
	print 'Instructions :  \t"stop" pour arrêter les mesures.\n'
	print '\t\t"resetBME" pour redémarrer le capteur BME280'
	return (CheckInput)
	   
def measureMeteoParams():
	nbmes = 0
	while True :
		option1 = raw_input('Instructions :  \t"start" pour démarrer les mesures "check" pour la maintenance "exit" pour sortir.\n--> ')
		if option1 == 'exit' :
			break
		elif option1 == 'start' :
			break
		elif option1 == 'check' :
			option2 = 'ready'
			while option2.strip != exit :
				option2 = raw_input('Taper "info" pour avoir des informations, "changer" pour modifier les paramètres des capteurs, "exit" pour sortir.\n---> ')
				if option2 == 'exit':
					break
				elif option2 == 'info':
					option3 = 4
					while option3 != 0 :
						option3 = raw_input('Informations sur les capteurs : BME280 (1) MCP9808 (2) exit (0)\n----> ')
						if option3 == '0' :
							break
						elif option3 == '1' :
							get_bmSensor(bme)
						elif option3 == '2' :
							get_mcpSensor()
						else :
							print 'Code inconnu : %s'%option3
				elif option2 == 'changer' :
					option3 = 3
					while option3 != 0 :
						option3 = raw_input('Changement des paramètres des capteurs :\n\tMCP9808-precision (1)\n\tMCP9808-hysteresis (2)\n\tBME280_mode (3)\n\t sortir (0)\n----> ')
						if option3 == '0' :
							break
						elif option3 == '1' :
							val = raw_input("precision value (LOW MED HI MAX) : ")
							if val == 'LOW' :
								mcp.setResolution (0x00)
							elif val == 'MED' :
								mcp.setResolution (0x01)
							elif val == 'HI' :
								mcp.setResolution (0x02)
							elif val == 'MAX' :
								mcp.setResolution (0x03)
							else :
								print 'Commande inconnue : "%s"\n'%val
						elif option3 == '2' :
							val = raw_input("Hysteresis value  (HYST_0 HYST_1_5 HYST_3_0 HYST_6_0) : ")
							if val == 'HYST_0' :
								mcp.setHysteresis (0x0000)
							elif val == 'HYST_1_5' :
								mcp.setHysteresis (0x0002)
							elif val == 'HYST_3_0' :
								mcp.setHysteresis (0x0004)
							elif val == 'HYST_6_0' :
								mcp.setHysteresis (0x0006)
							else :
								print 'Commande inconnue : "%s"\n'%val
						elif option3 == '3' :
							val = raw_input("precision value (0 1 2 3 4 5 ) : ")
							if val == '0' :
								bme.setUsageMode(0)
							elif val == '1' :
								bme.setUsageMode(1)
							elif val == '2' :
								bme.setUsageMode(2)
							elif val == '3' :
								bme.setUsageMode(3)
							elif val == '4' :
								bme.setUsageMode(4)
							elif val == '5' :
								bme.setUsageMode(5)
							else :
								print 'Code inconnu : %s'%val
						else :
							print 'Code inconnu : "%s"\n'%option3
				else :
					print 'Commande inconnue : "%s"\n'%option2
		else :
			print 'Commande inconnue : "%s"\n'%option1
# Main loop
	if option1.strip() == 'start' :
		CheckInput = init_Thread()
		while True :
			if CheckInput == ['stop']: 
				print 'Arrêt demandé.'
				break
			elif CheckInput == ['resetBME'] :
				reset_bmSensor(bme)
				print 'Reset BME effectué.'
				CheckInput.remove('resetBME')
				thread.start_new_thread(input_thread, (CheckInput,))
			elif CheckInput != [] :
				print 'Commande inconnue : "%s"\n'%CheckInput
				thread.start_new_thread(input_thread, (CheckInput,))
				del CheckInput[:]
			else :
				time.sleep (0.5)
			tempHR = mcp.getTemp()
			bme.update()
			tempBME = bme.getTemperature()
			pressBME = bme.getPressure() / 100.0
			hygroBME = bme.getHumidity()
			seaLevelPress = convertSeaLevel (pressBME)
			lux = mes_tslLux()
			uv.update()
			index = mes_uv()
			if nbmes == 0 :
				print 'Intensité Lumineuse : \tHumid(BME) : \tTemp(MCP) : \tTemp(BME) : \tPress(BME) : \tPress(SealevelBME) : \tUV Index :' 
				nbmes += 1
			elif nbmes == 9 :
				nbmes = 0
			else :
				nbmes += 1
			print '%.2f\t\t\t' %lux + '%2.1f\t\t' %hygroBME + '%.4f °C\t' %tempHR +  '%.2f °C\t' %tempBME + '%.2f hPa\t' %pressBME + '%.2f hPa\t\t\t' %seaLevelPress + '%.2f\t' %index
			
			time.sleep (5)
	else :
		print 'Bye...'
	return

measureMeteoParams()

